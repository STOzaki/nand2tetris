// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Or(a=instruction[15],b=instruction[5],out=sela);
	Mux16(a=instruction,b=outm,sel=outnot,out=ini); // Mux between the instruction and ALU output
	Not(in=instruction[15],out=outnot);
	ARegister(in=ini,load=sela,out=outa,out[0..14]=addressM);
	
	And(a=instruction[15],b=instruction[12],out=outand);
	Mux16(a=outa,b=inM,sel=outand,out=am); // mux between A and M
	And(a=instruction[15],b=instruction[4],out=outdr);
	DRegister(in=outm,load=outdr,out=outd); // D register

	ALU(x=outd,y=am,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=outm,zr=zero,ng=notg);
	And(a=instruction[2],b=notg,out=w1); // look at the diagram of j1 (check to see if j1 is less than the comp)
	And(a=instruction[1],b=zero,out=w2); // look at the diagram of j2 (check to see if j2 is equal to the comp)
	Or(a=zero,b=notg,out=ngz);
	Not(in=ngz,out=g); // greater than
	And(a=instruction[0],b=g,out=w3); // look at the diagram of j3 (check to see if j3 is greater than the comp)
	Or8Way(in[0]=w1,in[1]=w2,in[2]=w3,in[3]=false,in[4]=false,in[5]=false,in[6]=false,in[7]=false,out=loader); // if any of the computations are true, then we will jump
	And(a=loader,b=instruction[15],out=loadout); // if instruction is 1 then you are going to allow them to jump because it is a C instruction.
	PC(in=outa,inc=true,reset=reset,load=loadout,out[0..14]=pc);
	And(a=instruction[3],b=instruction[15],out=writeM);
}
